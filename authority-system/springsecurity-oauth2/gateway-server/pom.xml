<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>springsecurity-oauth2</artifactId>
        <groupId>com.wm</groupId>
        <version>0.0.1</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>gateway-server</artifactId>

    <properties>
        <!-- docker harbor地址 -->
        <docker.server.location>192.168.40.131:8090/library</docker.server.location>
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
    </properties>

    <dependencies>

        <dependency>
            <groupId>com.wm</groupId>
            <artifactId>common-model</artifactId>
            <version>0.0.1</version>
        </dependency>

        <dependency>
            <groupId>com.wm</groupId>
            <artifactId>cloud-redis-starter</artifactId>
            <version>0.0.1</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

         <!--sentinel整合gateway -->
         <dependency>
             <groupId>com.alibaba.cloud</groupId>
             <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
         </dependency>
         <dependency>
             <groupId>com.alibaba.cloud</groupId>
             <artifactId>spring-cloud-alibaba-sentinel-gateway</artifactId>
         </dependency>


        <!-- 引入swagger3包 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>
        <!-- 引入swagger-bootstrap-ui包，优化UI页面，可不加 -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>swagger-bootstrap-ui</artifactId>
            <version>1.8.5</version>
        </dependency>

        <!--guava工具包 -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <!-- hutool java工具类库 https://www.hutool.cn/ -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>


        <!-- OAuth2资源服务器-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-resource-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-jose</artifactId>
        </dependency>

        <!--server-api-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>

        <!--yml中属性提示 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

     </dependencies>


    <build>
        <finalName>${project.name}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.0.2.RELEASE</version>
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                </configuration>
            </plugin>

            <!--Lifecycle-install || 跳过test ||可能需要关闭netty -->
            <plugin>
                <groupId>com.github.lazyBoyl</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.1-release</version>
                <configuration>
                    <imagesHeadName>${project.name}:${version}</imagesHeadName>
                    <containerRunName>${project.name}</containerRunName>
                    <dockerServerLocation>${docker.server.location}</dockerServerLocation>
                    <pushImageToDockerHub>false</pushImageToDockerHub>
                    <!-- 本地package以后生成的jar包的完整路径 -->
                    <jarTargetPath>${basedir}/target/${project.name}.jar</jarTargetPath>
                    <!-- centos服务器存放我们的dockerFile文件和相应的jar包的文件夹的路径 -->
                    <dockerImagesPath>/usr/java/${project.name}/</dockerImagesPath>
                    <!-- 创建镜像的dockerFile的文件的路径 -->
                    <dockerFilePath>${basedir}/src/main/resources/Dockerfile</dockerFilePath>
                    <!-- 该工程启动的时候的文件挂载 -->
                    <containerRunShare>/usr/java/${project.name}/:/opt/upgrade/</containerRunShare>
                    <!-- 该工程启动的时候的端口映射,多个端口那就对应着启动多少个容器 -->
                    <containerRunPorts>
                        <containerRunPort>12222:12222,8081:8081</containerRunPort>
                    </containerRunPorts>
                    <options>
                        <!-- 服务器的ip,账号,密码 。可以实现多服务部署-->
                        <option>
                            192.168.40.131,root,root!Q2w
                        </option>
                    </options>
                </configuration>
                <executions>
                    <execution>
                        <!-- 设置该插件的执行的生命周期为package完成以后执行,若不想绑定就将executions这块的代码注释了，后面就不会在打包好以后再去执行docker插件的操作 -->
                        <phase>package</phase>
                        <goals>
                            <!--phase与goal是绑定的关系，当g到达了phase阶段的时候就会去执行goal，此处的值固定为dockerMavenPlugin，因为插件给予他的名字就是dockerMavenPlugin -->
                            <goal>dockerMavenPlugin</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>ch.ethz.ganymed</groupId>
                        <artifactId>ganymed-ssh2</artifactId>
                        <version>262</version>
                        <scope>compile</scope>
                    </dependency>
                    <dependency>
                        <groupId>commons-io</groupId>
                        <artifactId>commons-io</artifactId>
                        <version>2.6</version>
                        <type>jar</type>
                        <scope>compile</scope>
                    </dependency>
                    <dependency>
                        <groupId>commons-lang</groupId>
                        <artifactId>commons-lang</artifactId>
                        <version>2.6</version>
                        <type>jar</type>
                        <scope>compile</scope>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>jul-to-slf4j</artifactId>
                        <version>1.7.25</version>
                        <scope>compile</scope>
                    </dependency>
                </dependencies>
            </plugin>


        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.json</include>
                    <include>**/*.ftl</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>